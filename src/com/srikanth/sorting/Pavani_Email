I developed Restful Services which takes the request from the users to 
1) Create
2) Read
3) Update
4) Delete the resources.I developed these resources using spring-boot framework which provides @RestController,@RequestMapping,@ResponseEntity
@Param,@RequestParam,@QueryParam annotations.
In my current project I developed these services to create account of different types like checking account,credit account,loan account...etc.
For the services to get exposed to outside services I integrated these services with swagger which provides an UI to display the list of operations these
services can do,what are the input paramters,response types and Errors.Used global exceptions to handle the exceptions.Used different types of rest verbs 
GET to get the values(Read Operation),POST create new resource,PUT update the existing resource and delete to delete the resources.

Once the request is successfully mapped I developed a service using @service which interacts with the Repositorty to do the database transactions like
create,read,update and delete.For interacting with the database I used spring-data-jpa which provides @Repository curdrespository...etc functionalities by which
I can succesffuly do the database operation.Implemented custom respositeries by extending the CURDREPOSITORY,JPAREPOSITORY.Done some one-to-many and many-to-one
relation mapping to maintains the realation between repositories(Tables)

I developed Micro-services and deployed on to Pivotal Cloud-foundry,I followed following steps to develops the services

	1)Developed Micro-services using Spring-boot 1.5.7 version and deployed them onto cloud foundry.Discovery of services is managed by using Eureka Server and Load balancing using Ribbon. 
	
	2)Created Discovery Service (Creating Eureka Discovery Service)
		Eureka Server using Spring Cloud
		In application.yml file I configured the discovery server and used @EnableEurekaServer in spring-boot application to enable eureka server
		
	3)Created MicroService (the Producer)		
	
		In application.yml provided the Discovery Server Access,Application Name for the producer to get registered with the discovery server.
		 
	4)Created Microservice Consumers by finding Services registered with Discovery Service (the consumer)
		
		Created Consumers to find the Producer Services registered with Discovery Service.Used @EnableDiscoveryClient to find the Micro-services.
	
	5)Maven Dependencies 
  		spring-cloud-starter-eureka,spring-cloud-starter,spring-boot-starter-web,spring-cloud-starter-eureka-server
  	
  	6) Developed micro-services and deployed onto Pivotal-cloud foundry using command line interface  command "cf push"


